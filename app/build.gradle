import groovy.io.FileType

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.novoda.android-command'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'me.proxer.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionMajor * 10000 + rootProject.ext.versionMinor * 1000 + rootProject.ext.versionPatch * 100
        versionName "${rootProject.ext.versionMajor}.${rootProject.ext.versionMinor}.${rootProject.ext.versionPatch}"

        vectorDrawables.useSupportLibrary true
        resConfigs "de"
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets("RELEASE_STORE_FILE"))
                storePassword getFromSecrets("RELEASE_STORE_PASSWORD")
                keyAlias getFromSecrets("RELEASE_KEY_ALIAS")
                keyPassword getFromSecrets("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "PROXER_API_KEY", "\"${getFromSecrets("PROXER_API_KEY")}\""
        }

        debug {
            minifyEnabled true
            useProguard false
            proguardFiles 'proguard-rules.pro'
            archivesBaseName = "proxerme-${defaultConfig.versionName}"
        }

        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
            archivesBaseName = "app-${defaultConfig.versionName}"

            if (shouldSign()) {
                signingConfig signingConfigs.release
            } else {
                logger.warn('This build will not be signed because it is missing the keystore info. Please add ' +
                        'values for "RELEASE_STORE_FILE", "RELEASE_STORE_PASSWORD", "RELEASE_KEY_ALIAS" and ' +
                        '"RELEASE_KEY_PASSWORD" to your secrets.properties file if you want the apk to be signed.')
            }
        }
    }

    packagingOptions {
        exclude '**/*.kotlin_builtins'
        exclude '**/*.kotlin_module'
        exclude '**/*.gwt.*'
        exclude '**/rxjava.properties'
        exclude 'build-data.properties'
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
            res.srcDirs = getResSrcDirs()
        }
    }
}

dependencies {
    implementation deps.kotlinStdlib
    implementation deps.anko
    implementation deps.supportAppCompat
    implementation deps.supportV13
    implementation deps.supportRecyclerView
    implementation deps.supportCardView
    implementation deps.supportGridLayout
    implementation deps.supportDesign
    implementation deps.supportAnimatedVectorDrawable
    implementation deps.supportCustomtabs
    implementation deps.supportPreference
    implementation deps.supportPreferenceFix
    implementation deps.supportPreferenceFixSpinner
    implementation deps.architectureLifecycle
    implementation deps.room
    implementation deps.playServicesGcm
    implementation deps.androidJob
    implementation deps.proxerLib
    kapt deps.architectureLifecycleCompiler
    kapt deps.roomCompiler

    implementation deps.rxJava
    implementation deps.rxKotlin
    implementation deps.rxAndroid
    implementation deps.rxBinding
    implementation deps.rxBindingV4
    implementation deps.rxBindingV7
    implementation deps.rxBindingDesign
    implementation deps.rxBindingRecyclerView
    implementation deps.rxLifecycle
    implementation deps.rxBus

    implementation(deps.aboutLibraries) { transitive = true }
    implementation(deps.materialDrawer) { transitive = true }
    implementation deps.iconics
    implementation deps.iconicsViews
    implementation deps.communityMaterialTypeface
    implementation deps.crossfader
    implementation deps.materialAbout
    implementation deps.subsamplingScaleImageView
    implementation deps.tabLayoutHelper
    implementation deps.materialDialogs
    implementation deps.flexbox
    implementation deps.emojiIos
    implementation(deps.exomedia) {
        exclude module: 'exoplayer-hls'
        exclude module: 'exoplayer-dash'
        exclude module: 'exoplayer-smoothstreaming'
    }
    implementation deps.exoplayer
    implementation deps.exoplayerIntegration
    implementation deps.materialProgressBar
    implementation deps.materialRatingBar
    implementation deps.customtabsHelper
    implementation deps.introduction
    implementation deps.materialBadgeView
    implementation deps.aspectRatioImageView

    implementation deps.threeten
    implementation(deps.hawk) { exclude module: 'gson' }
    implementation deps.glide
    implementation deps.glideOkHttp
    implementation deps.okHttp
    implementation deps.okio
    implementation deps.linkBuilder
    implementation deps.easyHeaderFooterAdapter
    implementation deps.kOptional
    implementation deps.kotterknife
    kapt deps.glideCompiler

    implementation deps.strictModeCompat
    debugImplementation deps.leakCanary
    releaseImplementation deps.leakCanaryNoOp
}

static getResSrcDirs() {
    List<String> result = ['src/main/res']

    new File('app/src/main/res/layouts/').eachFile(FileType.DIRECTORIES) {
        result.add("src/main/res/layouts/${it.name}")
    }

    return result
}

static getFromSecrets(String key) {
    Properties result = new Properties()
    Object isCI = System.getenv('CI')

    if (isCI != null && isCI.toBoolean()) {
        return "dummy"
    }

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        throw new GradleException('Please add a secrets.properties file with a value for "' + key +
                '" to perform this action.')
    }

    if (!result.containsKey(key)) {
        throw new GradleException('Please include a value for "' + key +
                '" in your secrets.properties file to perform this action.')
    }

    return result[key]
}

static shouldSign() {
    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        return false
    }

    return result.containsKey("RELEASE_STORE_FILE") && result.containsKey("RELEASE_STORE_PASSWORD") &&
            result.containsKey("RELEASE_KEY_ALIAS") && result.containsKey("RELEASE_KEY_PASSWORD")
}
