import groovy.io.FileType

buildscript {
    apply from: 'gradle/versions.gradle'
    apply from: 'gradle/dependencies.gradle'

    repositories {
        jcenter()
        google()
        gradlePluginPortal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpathDependencies.values().each { classpath it }

        // TODO: Temporary solution to work around bugs in previous Jetifier versions. Remove once working.
        classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-alpha10'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'com.novoda.android-command'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    dexOptions {
        preDexLibraries !isCI()
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    defaultConfig {
        applicationId 'me.proxer.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionMajor * 1000000 + appVersionMinor * 10000 + appVersionPatch * 100
        versionName "$appVersionMajor.$appVersionMinor.$appVersionPatch"

        vectorDrawables.useSupportLibrary true
        resConfigs 'de'
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets('RELEASE_STORE_FILE'))
                storePassword getFromSecrets('RELEASE_STORE_PASSWORD')
                keyAlias getFromSecrets('RELEASE_KEY_ALIAS')
                keyPassword getFromSecrets('RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        boolean shouldSign = shouldSign() && !isCI()

        if (!shouldSign) {
            logger.warn('This build will not be signed because it is missing the keystore info. Please add ' +
                    'values for "RELEASE_STORE_FILE", "RELEASE_STORE_PASSWORD", "RELEASE_KEY_ALIAS" and ' +
                    '"RELEASE_KEY_PASSWORD" to your secrets.properties file if you want the apk to be signed.')
        }

        debug {
            multiDexEnabled true

            archivesBaseName = "app-${defaultConfig.versionName}"
            buildConfigField 'String', 'PROXER_API_KEY', "\"${getFromSecrets('PROXER_API_KEY')}\""
            buildConfigField 'boolean', 'STORE', "Boolean.parseBoolean(\"false\")"
            buildConfigField 'boolean', 'LOG', "Boolean.parseBoolean(\"true\")"
        }

        release {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile 'config/proguard/proguard-rules.pro'
            }

            archivesBaseName = "app-${defaultConfig.versionName}"
            buildConfigField 'String', 'PROXER_API_KEY', "\"${getFromSecrets('PROXER_API_KEY')}\""
            buildConfigField 'boolean', 'STORE', "Boolean.parseBoolean(\"false\")"
            buildConfigField 'boolean', 'LOG', "Boolean.parseBoolean(\"false\")"

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }

        logRelease {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile 'config/proguard/proguard-rules.pro'
            }

            archivesBaseName = "app-${defaultConfig.versionName}"
            buildConfigField 'String', 'PROXER_API_KEY', "\"${getFromSecrets('PROXER_API_KEY')}\""
            buildConfigField 'boolean', 'STORE', "Boolean.parseBoolean(\"false\")"
            buildConfigField 'boolean', 'LOG', "Boolean.parseBoolean(\"true\")"

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }

        storeRelease {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile 'config/proguard/proguard-rules.pro'
            }

            archivesBaseName = "app-${defaultConfig.versionName}"
            buildConfigField 'String', 'PROXER_API_KEY', "\"${getFromSecrets('PROXER_API_KEY')}\""
            buildConfigField 'boolean', 'STORE', "Boolean.parseBoolean(\"true\")"
            buildConfigField 'boolean', 'LOG', "Boolean.parseBoolean(\"false\")"

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        mkdir("$buildDir/reports/lint")

        warningsAsErrors = true

        lintConfig file("$rootDir/config/lint/lint.xml")
        xmlOutput file("$buildDir/reports/lint/lint-results.xml")
        htmlOutput file("$buildDir/reports/lint/lint-results.html")
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_builtins'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/rxkotlin.properties'
        exclude 'META-INF/proguard/**'
        exclude 'kotlin/**'
        exclude 'third_party/**'
        exclude 'jsr305_annotations/**'
        exclude 'error_prone/**'
        exclude 'protobuf.meta'
        exclude 'build-data.properties'
        exclude 'androidsupportmultidexversion.txt'
    }

    sourceSets {
        main {
            main.java.srcDirs += 'src/main/kotlin'
            debug.java.srcDirs += 'src/debug/kotlin'
            res.srcDirs += getResSrcDirs()
        }
    }

    if (isCI()) {
        // We do not care for these build types on CI.
        // These do only add a large amount of build time while not providing a large benefit.
        variantFilter { variant ->
            if (variant.buildType.name == "logRelease" || variant.buildType.name == "storeRelease") {
                setIgnore(true)
            }
        }
    }
}

repositories {
    jcenter()
    google()
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    implementationDependencies.values().each { implementation it }
    debugImplementationDependencies.values().each { debugImplementation it }
    releaseImplementationDependencies.values().each { releaseImplementation it }
    releaseImplementationDependencies.values().each { logReleaseImplementation it }
    releaseImplementationDependencies.values().each { storeReleaseImplementation it }
    compileOnlyDependencies.values().each { compileOnly it }
    kaptDependencies.values().each { kapt it }

    excludingImplementationDependencies.values().each { dependency ->
        implementation(dependency.dependency) {
            dependency.exclusions.each {
                exclude module: it
            }
        }
    }
}

kapt {
    useBuildCache = true
}

detekt {
    version = detektPluginVersion

    profile('main') {
        config = "$projectDir/config/detekt/detekt.yml"
        input = "$projectDir/src/main/kotlin"
        output = "$buildDir/reports/detekt"
        parallel = true
    }
}

ktlint {
    version = ktlintVersion
    reporters = ["CHECKSTYLE"]
}

wrapper {
    gradleVersion rootProject.ext.gradleVersion
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

gradle.projectsEvaluated {
    check.dependsOn detektCheck
}

static getResSrcDirs() {
    String layoutsPath = 'src/main/res/layouts'
    Set<String> result = []

    new File(layoutsPath).eachFile(FileType.DIRECTORIES) {
        result.add("$layoutsPath/$it.name")
    }

    return result
}

static String getFromSecrets(String key) {
    if (isCI()) {
        return 'dummy'
    }

    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        throw new GradleException("Please add a secrets.properties file with a value for $key to perform this action.")
    }

    if (!result.containsKey(key)) {
        throw new GradleException("Please include a value for $key in your secrets.properties " +
                "file to perform this action.")
    }

    return result[key]
}

static boolean shouldSign() {
    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        return false
    }

    return result.containsKey('RELEASE_STORE_FILE') && result.containsKey('RELEASE_STORE_PASSWORD') &&
            result.containsKey('RELEASE_KEY_ALIAS') && result.containsKey('RELEASE_KEY_PASSWORD')
}

static boolean isCI() {
    Object isCI = System.getenv('CI')

    return isCI != null && isCI.toBoolean()
}
